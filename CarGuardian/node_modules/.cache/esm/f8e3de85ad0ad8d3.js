let Schema,createHash,genSalt;_ad0‍.x([["default",()=>_ad0‍.o]]);_ad0‍.w("../UserSchema",[["default",["Schema"],function(v){Schema=v}]]);_ad0‍.w("bcrypt",[["hash",["createHash"],function(v){createHash=v}],["genSalt",["genSalt"],function(v){genSalt=v}]]);

const User = mongoose.model("User", Schema);

const sign = async (req, res) => {
  const { name, username, email, password, mobile, regNo } = req.body;
  const existing = await User.findOne({
    email_id: email,
    mobile_number: mobile,
  }).exec();

  if (existing) {
    return res.status(400).json({
      error: true,
      message: "User already exists",
    });
  }

  const saltRounds = 10;
  const salt = await genSalt(saltRounds);
  const hash = await createHash(password, salt);

  const created = await User.save({
    name,
    username,
    email_id: email,
    password: hash,
    mobile_number: mobile,
    registration_number: regNo,
  });

  if (created) {
    return res.status(200).json({
      error: false,
      message: "User registered",
    });
  } else {
    return res.status(500).json({
      error: true,
      message: "Error in creating user",
    });
  }
};

_ad0‍.d(sign);
